#!/bin/bash

# Get the list of changed Apex (.cls) or LWC files
changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')

# Check if there are any relevant changes
if [ -z "$changed_files" ]; then
  echo "No relevant changes to scan."
  exit 0
fi

# Ensure that a valid directory exists for the scanner report
output_dir="./scanner-reports"
mkdir -p "$output_dir"

# Loop through each changed file to get the changed lines
for file in $changed_files; do
  echo "Checking file: $file"

  # Get the changed lines for each file (in unified diff format)
  changed_lines=$(git diff --cached -U0 $file | grep -E '^\+[^+]' | sed 's/^\+//')

  # If there are changed lines, run the scanner for the entire file
  if [ ! -z "$changed_lines" ]; then
    echo "Changed lines for $file:"
    echo "$changed_lines"
    
    # Define the output file path
    output_file="$output_dir/$(basename $file).json"

    # Run the SFDX scanner for the entire file and save the report in the output directory
    sf scanner:run --target "$file" --format "json" --outfile "$output_file"

    # Check if the JSON report exists
    if [ ! -f "$output_file" ]; then
      echo "Scanner report not found for $file. Please check the scanner command."
      exit 1
    fi

    # Use jq to extract the violations from the JSON report, updating based on actual structure
    violations=$(jq '.files[0].violations[]' "$output_file")

    # Initialize severity count
    severity_fail_count=0

    # Loop through the violations and compare line numbers with changed lines
    while IFS= read -r line; do
      violation_line=$(echo "$line" | jq '.line')
      
      # Check if the violation line matches any of the changed lines
      if echo "$changed_lines" | grep -q "$violation_line"; then
        severity=$(echo "$line" | jq '.severity')
        if [ "$severity" -eq 3 ]; then
          ((severity_fail_count++))
        fi
      fi
    done <<< "$violations"

    # Output the fail count for debugging
    echo "Severity Fail Count for $file: $severity_fail_count"

    # Block commit if there are severity 3 issues in the changed lines
    if [ "$severity_fail_count" -gt 0 ]; then
      echo "Blocking your commit due to vulnerabilities found with severity 3 in $file."
      exit 1
    fi
  else
    echo "No significant changes in $file."
  fi
done

echo "No vulnerabilities found. Proceeding with commit."
exit 0
