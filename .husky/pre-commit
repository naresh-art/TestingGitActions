#!/bin/bash

# Get the list of changed Apex (.cls) or LWC files
changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')

# Check if there are any relevant changes
if [ -z "$changed_files" ]; then
  echo "No relevant changes to scan."
  exit 0
fi

# Check for previous commit to compare changes
if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
  echo "Fetching changed files and lines between HEAD~1 and HEAD"
  git diff --unified=0 HEAD~1 HEAD > changes.diff || { echo "Failed to get git diff"; exit 1; }
else
  echo "No previous commit to compare to." > changes.diff
fi

# Check if diff has any content
if [ ! -s changes.diff ]; then
  echo "No changes detected."
  exit 0
fi

# Extract and print only the changed lines and line numbers from .cls and .lwc files
echo "Processing changes for .cls and .lwc files..."
awk '
  BEGIN {valid_file=0}
  /^diff --git/ {valid_file=0}
  /\.cls$|\.lwc$/ {valid_file=1}
  /^@@/ && valid_file {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); line_offset=0; next}
  /^[+][^+]/ && valid_file {print "Line", start + line_offset++, ":", substr($0, 2)}
' changes.diff | grep -v '^+++' > changed_cls_lwc_lines.txt

# Check if any relevant changes were found in .cls or .lwc files
if [ ! -s changed_cls_lwc_lines.txt ]; then
  echo "No changes detected in .cls or .lwc files."
  exit 0
fi

cat changed_cls_lwc_lines.txt

# Get the changed .cls and .lwc files from the diff
files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')

# Check if files were found
if [ -z "$files" ]; then
  echo "No changed .cls or .lwc files detected."
  exit 0
fi

# Declare an array to store the line numbers
declare -a line_numbers_array=()

# Loop through each changed file
while IFS= read -r file; do
  echo "Processing file: $file"

  # Extract the actual changed lines and line numbers for the specific file
  changed_lines=$(grep -A 1000 "$file" changes.diff | grep '^\+' | sed 's/^+//')
  line_numbers=$(grep -A 1000 "$file" changes.diff | grep '^@@' | awk '{print $2}' | cut -d',' -f1 | sed 's/-//')

  echo "Changed lines in $file:"
  echo "$changed_lines"
  echo "Line numbers corresponding to the changed lines in $file:"
  echo "$line_numbers"

  # Reset the index for each file
  current_line_number=$(echo "$line_numbers" | head -1)
  echo "Starting line number: $current_line_number"

  # Iterate through changed lines
  while IFS= read -r line; do
    echo "Running SFDX Scanner on file: $file at line number: $current_line_number..."
    sf scanner:run --target "$file" --format "csv" --outfile "scanner-report.csv" || {
      echo "Scanner run failed for $file."
    }

    # Store the current line number in the array
    line_numbers_array+=("$current_line_number")
    current_line_number=$((current_line_number + 1))
  done <<< "$changed_lines"

done <<< "$files"

# Store the line numbers array in a file for later use
echo "${line_numbers_array[*]}" > line_numbers.txt
cat line_numbers.txt

# Filter the scanner report by line numbers
echo "Filtering scanner report for the relevant line numbers."

# Ensure the scanner report is filtered correctly
awk -v lines="$(cat line_numbers.txt)" '
BEGIN {
  FPAT = "([^,]+)|(\"[^\"]+\")";  # Define how to match CSV fields
  split(lines, arr, " ");
  for (i in arr) {
    valid[arr[i]] = 1;  # Treat line numbers as strings
  }
}
NR == 1 || (substr($4, 2, length($4)-2) in valid) {  # Check if Line (stripped of quotes) is in valid lines
  print $0;  # Only print matching rows
}
' scanner-report.csv > filtered-scanner-report.csv

# Check if the filtered scanner report contains severity 3 or higher violations
severity_fail_count=$(grep -oP '"severity":\s*(1)' filtered-scanner-report.csv | wc -l)

# Output the fail count for debugging
echo "Severity Fail Count::::::"
echo "$severity_fail_count"

# Block commit if there are severity 3 issues
if [ "$severity_fail_count" -gt 0 ]; then
  echo "Blocking your commit due to vulnerabilities found with severity 3."
  exit 1
else
  echo "No vulnerabilities found. Proceeding with commit."
  exit 0
fi
