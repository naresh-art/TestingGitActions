#!/bin/bash

# Get the list of changed Apex (.cls) or LWC files
changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')

# Check if there are any relevant changes
if [ -z "$changed_files" ]; then
  echo "No relevant changes to scan in the files."
  exit 0
fi

# Convert changed_files into an array
changed_files_array=($changed_files)

# Initialize a temp file to hold the full class with changed lines
temp_scan_file="temp_scan.cls"

# Start with an empty file
> "$temp_scan_file"

# Collect the diff (changed lines) for each file and reconstruct the class structure
for file in "${changed_files_array[@]}"
do
  echo "Processing file: $file"

  # Extract only the changed lines (lines starting with '+') and remove the '+' symbol, ignoring invalid diff headers
  changed_lines=$(git diff --cached -U0 "$file" | grep '^+' | grep -v '+++' | sed 's/^+//')

  # Get the class declaration and all lines before the opening brace
  class_header=$(awk '/class/{f=1} f{print; if ($0 ~ /\{/){exit}}' "$file")

  # Find the closing line of the class
  class_footer=$(grep -nE '^\s*\}\s*$' "$file" | tail -n 1 | cut -d ':' -f 1)

  # Extract everything from the last changed line to the closing brace
  footer_content=$(tail -n +"$class_footer" "$file")

  # If a valid class structure is found, proceed with reconstruction
  if [ -n "$class_header" ] && [ -n "$class_footer" ]; then
    # Write the class header to the temp file
    echo "$class_header" > "$temp_scan_file"
    
    # Append the changed lines into the reconstructed class
    echo "$changed_lines" >> "$temp_scan_file"

    # Append the class closing brace from the original file
    echo "$footer_content" >> "$temp_scan_file"
  else
    echo "Unable to reconstruct the class structure for $file"
    exit 1
  fi
done

# Check if the temp_scan_file has data to scan
if [ ! -s "$temp_scan_file" ]; then
  echo "No valid class structure to scan."
  exit 0
fi

# Display the content of the temp_scan_file for debugging purposes
echo "Reconstructed class to scan:"
cat "$temp_scan_file"

# Run the SFDX scanner on the reconstructed temp file
sf scanner:run --target "$temp_scan_file" --format "json" --outfile "precommit-scanner-report.json"

# Check if the JSON report exists
if [ ! -f "precommit-scanner-report.json" ]; then
  echo "Scanner report not found. Please check the scanner command."
  exit 1
fi

# Manually parse the JSON and check for severity 3 issues within violations array
severity_fail_count=$(grep -oP '"severity":\s*(3)' precommit-scanner-report.json | wc -l)

# Output the fail count for debugging
echo "Severity Fail Count::::::"
echo "$severity_fail_count"

# Block commit if there are severity 3 issues
if [ "$severity_fail_count" -gt 0 ]; then
  echo "Blocking your commit due to vulnerabilities found with severity 3."
  exit 1
else
  echo "No vulnerabilities found. Proceeding with commit."
  exit 0
fi
