#!/bin/bash

# Get the list of changed Apex (.cls) or LWC files
changed_files=$(git diff --cached --name-only | grep -E '\.cls$|\.lwc$')

# Check if there are any relevant changes
if [ -z "$changed_files" ]; then
  echo "No relevant changes to scan in the files."
  exit 0
fi

# Convert changed_files into an array
changed_files_array=($changed_files)

# Initialize a temp file to hold the diff data
diff_file="changed_lines.diff"

# Collect the diffs (changed lines) for each file
for file in "${changed_files_array[@]}"
do
  echo "Collecting changed lines for file: $file"
  # Get only the changed lines (-U0 for no context)
  git diff --cached -U0 "$file" >> "$diff_file"
done

# Check if the diff file contains any data
if [ ! -s "$diff_file" ]; then
  echo "No changed lines found."
  exit 0
fi

# Display the diff file for debugging purposes
echo "Changed lines:"
cat "$diff_file"

# Run the SFDX scanner on the original files (because the scanner needs full context)
sf scanner:run --target "${changed_files_array[@]}" --format "json" --outfile "precommit-scanner-report.json"

# Check if the JSON report exists
if [ ! -f "precommit-scanner-report.json" ]; then
  echo "Scanner report not found. Please check the scanner command."
  exit 1
fi

# Extract violations that match the lines changed in the diff file
grep -B5 -A5 "$(cat $diff_file)" precommit-scanner-report.json > filtered-violations.json

# Check for violations with severity 3 in the filtered result
severity_fail_count=$(grep -oP '"severity":\s*(3)' filtered-violations.json | wc -l)

# Output the fail count for debugging
echo "Severity Fail Count::::::"
echo "$severity_fail_count"

# Block commit if there are severity 3 issues
if [ "$severity_fail_count" -gt 0 ]; then
  echo "Blocking your commit due to vulnerabilities found with severity 3."
  # Optionally display the report for the user
  cat filtered-violations.json
  exit 1
else
  echo "No vulnerabilities found. Proceeding with commit."
  exit 0
fi
