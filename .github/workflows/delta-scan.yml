name: SFDX Code Scan Delta

on:
  push:
    branches:
      - '**'

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write

jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install CLI
        run: npm install @salesforce/cli --global

      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner

      - name: Verify SFDX CLI Installation
        run: sf --version

      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core

      - name: Get changed files
        id: get-changes
        run: |
          git fetch --unshallow || true
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files between HEAD~1 and HEAD"
            git diff --name-only HEAD~1 HEAD > changed_files.txt
          else
            echo "No previous commit to compare to." > changed_files.txt
          fi
          cat changed_files.txt

      - name: Run SFDX Scanner on Changed Files
        if: success()
        run: |
          files=$(cat changed_files.txt | grep -E '\.cls$|\.lwc$' || true)
          echo "Files to scan: $files"
          if [ -n "$files" ]; then
            sf scanner:run --target $(echo "$files") --format "csv" --outfile "scanner-report.csv" || { echo "Scanner run failed"; exit 1; }
          else
            echo "No relevant files changed."
            touch scanner-report.csv
          fi
        env:
          SF_LAZY_LOAD_MODULES: 'true'
          SF_AUTOUPDATE_DISABLE: 'true'
          SF_DISABLE_AUTOUPDATE: 'true'

      - name: Encode CSV file to Base64
        if: success()
        id: encode_file
        run: |
          if [ -f scanner-report.csv ]; then
            base64 scanner-report.csv | tr -d '\n' > encoded_report.txt
          else
            echo "Scanner report CSV file not found."
            exit 1
          fi

      - name: Check Scanner Report Severity
        id: check_severity
        run: |
            if [ ! -f "scanner-report.csv" ]; then
              echo "Scanner report not found!"
              echo "QUALITY_GATE_STATUS=FAILED" >> $GITHUB_ENV
              echo "::error file=scanner-report.csv::Scanner report not found!"
              exit 1
            fi

            echo "Checking scanner report content:"
            cat scanner-report.csv

            SEVERITY_FAIL_COUNT=$(awk -F',' '{gsub(/^ *| *$/, "", $2); if($2 == "\"3\"") count++} END {print count}' scanner-report.csv)
            SEVERITY_FAIL_COUNT=${SEVERITY_FAIL_COUNT:-0}  # Default to 0 if SEVERITY_FAIL_COUNT is empty
            echo "Severity 3 Count: $SEVERITY_FAIL_COUNT"

            if [ "$SEVERITY_FAIL_COUNT" -gt 0 ]; then
              echo "Quality gate failed due to high severity issues."
              echo "QUALITY_GATE_STATUS=FAILED" >> $GITHUB_ENV
              echo "::error::Quality gate failed due to high severity issues."
            else
              echo "Quality gate passed."
              echo "QUALITY_GATE_STATUS=PASSED" >> $GITHUB_ENV
              echo "::notice::Quality gate passed."
            fi

      # Upload the scanner report even if quality gate fails
      - name: Upload Scanner Report as Artifact
        if: always()  # Ensure file is uploaded regardless of pass/fail
        uses: actions/upload-artifact@v3
        with:
          name: scanner-report
          path: scanner-report.csv

  # Approval Job for Lead Contributor (naresh-art)
  approval:
    needs: installcli  # Approval happens after quality gate check
    runs-on: ubuntu-latest
    steps:
      - name: Request Approval from Lead (naresh-art)
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers: ['Prasanthkys']
            });
            core.setOutput("review_requests", JSON.stringify(response));

      - name: Await Approval Decision
        id: approval_status
        uses: actions/github-script@v6
        with:
          script: |
            const { data: reviews } = await github.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });

            const approval = reviews.find(review => review.state === 'APPROVED');
            const rejection = reviews.find(review => review.state === 'CHANGES_REQUESTED');

            if (approval) {
              core.setOutput('APPROVAL_STATUS', 'APPROVED');
            } else if (rejection) {
              core.setOutput('APPROVAL_STATUS', 'REJECTED');
            } else {
              throw new Error('No approval or rejection decision was found.');
            }

  # Deployment Job (if approval is granted)
  deploy:
    needs: [approval]
    runs-on: ubuntu-latest
    if: needs.approval.outputs.APPROVAL_STATUS == 'APPROVED'
    steps:
      - name: Deploy to Salesforce
        run: |
          echo "Deploying the changes to Salesforce..."
          sf deploy metadata --target-org ${{ secrets.SALESFORCE_ORG_ALIAS }} --source-dir "force-app"

      - name: Commit Changes to Repo
        run: |
          echo "Committing approved changes to the repository..."
          git config --global user.email "${{ steps.get-pusher-email.outputs.PUSHER_EMAIL }}"
          git config --global user.name "GitHub Action"
          git commit -m "Approved commit by lead contributor naresh-art"
          git push

  # Block Commit Job (if rejection is given)
  block_commit:
    needs: [approval]
    runs-on: ubuntu-latest
    if: needs.approval.outputs.APPROVAL_STATUS == 'REJECTED'
    steps:
      - name: Block Commit
        run: |
          echo "The changes were rejected by naresh-art. Blocking commit."
          exit 1  # Fail the workflow if rejected
