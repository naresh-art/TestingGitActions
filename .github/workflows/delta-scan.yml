name: SFDX Code Scan Delta
 
on:
  pull_request:
    branches:
      - '**'
 
jobs:
  installcli:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
 
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
 
      - name: Install CLI
        run: npm install @salesforce/cli --global
 
      - name: Install Scanner Plugin
        run: sf plugins install @salesforce/sfdx-scanner
 
      - name: Verify SFDX CLI Installation
        run: sf --version
 
      - name: Verify SFDX Scanner Plugin Installation
        run: sf plugins --core
 
      - name: Get changed files
        id: get-changes
        run: |
          git fetch --unshallow || true
          if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
            echo "Fetching changed files between HEAD~1 and HEAD"
            git diff --name-only HEAD~1 HEAD > changed_files.txt
          else
            echo "No previous commit to compare to." > changed_files.txt
          fi
          cat changed_files.txt
 
      - name: Run SFDX Scanner on Each File Individually
        if: success()
        run: |
          files=$(cat changed_files.txt | grep -E '\.cls$|\.lwc$' || true)
          echo "Files to scan: $files"
          if [ -n "$files" ]; then
            for file in $files; do
              # Extract just the filename without the full path to avoid directory issues
              file_basename=$(basename "$file")
              echo "Scanning file: $file"
              # Scan the individual file and save the report with a safe filename
              sf scanner:run --target "$file" --format "csv" --outfile "scanner-report-$file_basename.csv" || { echo "Scanner run failed"; exit 1; }
            done
            # Combine individual scanner reports into a single file
            echo "Combining all scanner reports into one."
            head -n 1 scanner-report-$(basename $(echo $files | cut -d' ' -f1)).csv > scanner-report.csv
            tail -n +2 -q scanner-report-*.csv >> scanner-report.csv
          else
            echo "No relevant files changed."
            touch scanner-report.csv
          fi
        env:
          SF_LAZY_LOAD_MODULES: 'true'
          SF_AUTOUPDATE_DISABLE: 'true'
          SF_DISABLE_AUTOUPDATE: 'true'
 
      - name: Encode CSV file to Base64
        if: success()
        id: encode_file
        run: |
          if [ -f scanner-report.csv ]; then
            base64 scanner-report.csv | tr -d '\n' > encoded_report.txt
          else
            echo "Scanner report CSV file not found."
            exit 1
          fi
 
      - name: Upload Scanner Report as Artifact
        uses: actions/upload-artifact@v3
        with:
            name: scanner-report.csv
            path: scanner-report.csv
 
      - name: Check Scanner Report Severity
        id: check_severity
        run: |
            if [ ! -f "scanner-report.csv" ]; then
              echo "Scanner report not found!"
              echo "QUALITY_GATE_STATUS=FAILED" >> $GITHUB_ENV
              echo "::error file=scanner-report.csv::Scanner report not found!"
              exit 1
            fi
            echo "Checking scanner report content:"
            cat scanner-report.csv
            # Count severity 3 issues
            SEVERITY_FAIL_COUNT=$(awk -F',' '{gsub(/^ *| *$/, "", $2); if($2 == "\"3\"") count++} END {print count}' scanner-report.csv)
            SEVERITY_FAIL_COUNT=${SEVERITY_FAIL_COUNT:-0}  
            echo "Severity 3 Count: $SEVERITY_FAIL_COUNT"
            if [ "$SEVERITY_FAIL_COUNT" -gt 0 ]; then
              echo "Quality gate failed due to high severity issues."
              echo "QUALITY_GATE_STATUS=FAILED" >> $GITHUB_ENV
              echo "::error::Quality gate failed due to high severity issues."
              exit 1  # Fail the workflow, blocking the PR
            else
              echo "Quality gate passed."
              echo "QUALITY_GATE_STATUS=PASSED" >> $GITHUB_ENV
              echo "::notice::Quality gate passed."
            fi
 
      - name: Manual Approval Step
        if: failure()
        uses: actions/github-script@v3
        id: approval_step
        with:
          script: |
            const { data: reviews } = await github.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            const approved = reviews.find(review => review.state === "APPROVED");
            if (approved) {
              core.setOutput("manual_approval", "APPROVED");
            } else {
              core.setOutput("manual_approval", "REJECTED");
            }
 
      - name: Approve PR if Approved
        if: steps.approval_step.outputs.manual_approval == 'APPROVED'
        run: echo "Pull request approved manually. Proceeding with the merge."
 
      - name: Reject PR if Rejected
        if: steps.approval_step.outputs.manual_approval == 'REJECTED'
        run: |
          echo "Pull request rejected. No further action will be taken."