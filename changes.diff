diff --git a/.husky/pre-commit b/.husky/pre-commit
index cf53fcc..626503c 100644
--- a/.husky/pre-commit
+++ b/.husky/pre-commit
@@ -2,17 +1,0 @@
-# if git diff --name-only --cached | grep -q ".husky/pre-commit\|.husky/post-commit"; then
-#   echo "Error: pre-commit and post-commit files cannot be modified."
-#   exit 1
-# fi
-# chmod 544 .husky/pre-commit
-# chmod 544 .husky/post-commit
-# Check if Husky is installed
-# if ! command -v husky &> /dev/null
-# then
-#     echo "Husky is not installed. Installing Husky..."
-#     npm install husky --save-dev
-
-#     # Initialize Husky hooks if it's not already set up
-#     npx husky install
-# else
-#     echo "Husky is already installed Sucessfully done."
-# fi
@@ -25 +8 @@ if [ -z "$changed_files" ]; then
-  echo "No relevant changes to scan in the files."
+  echo "No relevant changes to scan."
@@ -29,2 +12,13 @@ fi
-# Convert changed_files into an array
-changed_files_array=($changed_files)
+# Check for previous commit to compare changes
+if [ "$(git rev-list --count HEAD)" -gt "1" ]; then
+  echo "Fetching changed files and lines between HEAD~1 and HEAD"
+  git diff --unified=0 HEAD~1 HEAD > changes.diff || { echo "Failed to get git diff"; exit 1; }
+else
+  echo "No previous commit to compare to." > changes.diff
+fi
+
+# Check if diff has any content
+if [ ! -s changes.diff ]; then
+  echo "No changes detected."
+  exit 0
+fi
@@ -32,2 +26,9 @@ changed_files_array=($changed_files)
-# Run the SFDX scanner on each of the changed files
-sf scanner:run --target "${changed_files_array[@]}" --format "json" --outfile "precommit-scanner-report.json"
+# Extract and print only the changed lines and line numbers from .cls and .lwc files
+echo "Processing changes for .cls and .lwc files..."
+awk '
+  BEGIN {valid_file=0}
+  /^diff --git/ {valid_file=0}
+  /\.cls$|\.lwc$/ {valid_file=1}
+  /^@@/ && valid_file {split($0, arr, " "); gsub(",", "", arr[2]); start = substr(arr[2], 2); line_offset=0; next}
+  /^[+][^+]/ && valid_file {print "Line", start + line_offset++, ":", substr($0, 2)}
+' changes.diff | grep -v '^+++' > changed_cls_lwc_lines.txt
@@ -35,4 +36,15 @@ sf scanner:run --target "${changed_files_array[@]}" --format "json" --outfile "p
-# Check if the JSON report exists
-if [ ! -f "precommit-scanner-report.json" ]; then
-  echo "Scanner report not found. Please check the scanner command."
-  exit 1
+# Check if any relevant changes were found in .cls or .lwc files
+if [ ! -s changed_cls_lwc_lines.txt ]; then
+  echo "No changes detected in .cls or .lwc files."
+  exit 0
+fi
+
+cat changed_cls_lwc_lines.txt
+
+# Get the changed .cls and .lwc files from the diff
+files=$(grep -E '^\+\+\+ b/.*(\.cls|\.lwc)$' changes.diff | sed 's/+++ b\///')
+
+# Check if files were found
+if [ -z "$files" ]; then
+  echo "No changed .cls or .lwc files detected."
+  exit 0
@@ -41,2 +53,57 @@ fi
-# Manually parse the JSON and check for severity 3 issues within violations array
-severity_fail_count=$(grep -oP '"severity":\s*(1)' precommit-scanner-report.json | wc -l)
+# Declare an array to store the line numbers
+declare -a line_numbers_array=()
+
+# Loop through each changed file
+while IFS= read -r file; do
+  echo "Processing file: $file"
+
+  # Extract the actual changed lines and line numbers for the specific file
+  changed_lines=$(grep -A 1000 "$file" changes.diff | grep '^\+' | sed 's/^+//')
+  line_numbers=$(grep -A 1000 "$file" changes.diff | grep '^@@' | awk '{print $2}' | cut -d',' -f1 | sed 's/-//')
+
+  echo "Changed lines in $file:"
+  echo "$changed_lines"
+  echo "Line numbers corresponding to the changed lines in $file:"
+  echo "$line_numbers"
+
+  # Reset the index for each file
+  current_line_number=$(echo "$line_numbers" | head -1)
+  echo "Starting line number: $current_line_number"
+
+  # Iterate through changed lines
+  while IFS= read -r line; do
+    echo "Running SFDX Scanner on file: $file at line number: $current_line_number..."
+    sf scanner:run --target "$file" --format "csv" --outfile "scanner-report.csv" || {
+      echo "Scanner run failed for $file."
+    }
+
+    # Store the current line number in the array
+    line_numbers_array+=("$current_line_number")
+    current_line_number=$((current_line_number + 1))
+  done <<< "$changed_lines"
+
+done <<< "$files"
+
+# Store the line numbers array in a file for later use
+echo "${line_numbers_array[*]}" > line_numbers.txt
+cat line_numbers.txt
+
+# Filter the scanner report by line numbers
+echo "Filtering scanner report for the relevant line numbers."
+
+# Ensure the scanner report is filtered correctly
+awk -v lines="$(cat line_numbers.txt)" '
+BEGIN {
+  FPAT = "([^,]+)|(\"[^\"]+\")";  # Define how to match CSV fields
+  split(lines, arr, " ");
+  for (i in arr) {
+    valid[arr[i]] = 1;  # Treat line numbers as strings
+  }
+}
+NR == 1 || (substr($4, 2, length($4)-2) in valid) {  # Check if Line (stripped of quotes) is in valid lines
+  print $0;  # Only print matching rows
+}
+' scanner-report.csv > filtered-scanner-report.csv
+
+# Check if the filtered scanner report contains severity 3 or higher violations
+severity_fail_count=$(grep -oP '"severity":\s*(1)' filtered-scanner-report.csv | wc -l)
@@ -51,2 +117,0 @@ if [ "$severity_fail_count" -gt 0 ]; then
-  # Optionally display the report for the user
-  # cat precommit-scanner-report.json
@@ -57 +122 @@ else
-fi
\ No newline at end of file
+fi
diff --git a/force-app/main/default/classes/AccountInsertClass.cls b/force-app/main/default/classes/AccountInsertClass.cls
index 0cabfab..22e0708 100644
--- a/force-app/main/default/classes/AccountInsertClass.cls
+++ b/force-app/main/default/classes/AccountInsertClass.cls
@@ -70 +70 @@ public with sharing class AccountInsertClass {
-            System.debug('Test 1 seviorityyy test Test data testing days 12345678');
+            System.debug('Test 1 seviorityyy test Test data testing days');
diff --git a/force-app/main/default/classes/DummyAccountClass.cls b/force-app/main/default/classes/DummyAccountClass.cls
index 9d0e638..932cd60 100644
--- a/force-app/main/default/classes/DummyAccountClass.cls
+++ b/force-app/main/default/classes/DummyAccountClass.cls
@@ -43 +43 @@ public with sharing class DummyAccountClass {
-            System.debug('Test 1 seviorityyy testsss datas');
+            System.debug('Test 1 seviorityyy testsss data base123');
diff --git a/precommit-scanner-report.json b/precommit-scanner-report.json
index 4e7eef2..bbf5d32 100644
--- a/precommit-scanner-report.json
+++ b/precommit-scanner-report.json
@@ -1 +1 @@
-[{"engine":"pmd","fileName":"C:\\Git Check CICD\\TestingGitActions\\force-app\\main\\default\\classes\\DummyAccountClass.cls","violations":[{"line":43,"column":13,"endLine":43,"endColumn":60,"severity":3,"ruleName":"AvoidDebugStatements","category":"Performance","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_performance.html#avoiddebugstatements","message":"\r\nAvoid debug statements since they impact on performance\r\n"},{"line":43,"column":13,"endLine":43,"endColumn":60,"severity":3,"ruleName":"DebugsShouldUseLoggingLevel","category":"Best Practices","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel","message":"\r\nCalls to System.debug should specify a logging level.\r\n"}]}]
\ No newline at end of file
+[{"engine":"pmd","fileName":"C:\\Git Check CICD\\TestingGitActions\\force-app\\main\\default\\classes\\AccountInsertClass.cls","violations":[{"line":70,"column":13,"endLine":70,"endColumn":75,"severity":3,"ruleName":"AvoidDebugStatements","category":"Performance","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_performance.html#avoiddebugstatements","message":"\r\nAvoid debug statements since they impact on performance\r\n"},{"line":70,"column":13,"endLine":70,"endColumn":75,"severity":3,"ruleName":"DebugsShouldUseLoggingLevel","category":"Best Practices","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel","message":"\r\nCalls to System.debug should specify a logging level.\r\n"}]},{"engine":"pmd","fileName":"C:\\Git Check CICD\\TestingGitActions\\force-app\\main\\default\\classes\\DummyAccountClass.cls","violations":[{"line":43,"column":13,"endLine":43,"endColumn":65,"severity":3,"ruleName":"AvoidDebugStatements","category":"Performance","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_performance.html#avoiddebugstatements","message":"\r\nAvoid debug statements since they impact on performance\r\n"},{"line":43,"column":13,"endLine":43,"endColumn":65,"severity":3,"ruleName":"DebugsShouldUseLoggingLevel","category":"Best Practices","url":"https://docs.pmd-code.org/pmd-doc-7.4.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel","message":"\r\nCalls to System.debug should specify a logging level.\r\n"}]}]
\ No newline at end of file
